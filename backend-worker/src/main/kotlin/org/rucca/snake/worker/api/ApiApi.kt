/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package org.rucca.snake.worker.api

import org.rucca.snake.worker.model.ApiExecPost200ResponseDTO
import org.rucca.snake.worker.model.ApiExecPost400ResponseDTO
import org.rucca.snake.worker.model.ApiExecPostRequestDTO
import org.rucca.snake.worker.model.ApiSubmitPost200ResponseDTO
import org.rucca.snake.worker.model.ApiSubmitPost400ResponseDTO
import org.rucca.snake.worker.model.ApiSubmitPost403ResponseDTO
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Email
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size
import javax.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@RestController
@Validated
interface ApiApi {

    @Operation(
        tags = ["default",],
        summary = "Execute code in sandbox",
        operationId = "apiExecPost",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "Execution successful", content = [Content(schema = Schema(implementation = ApiExecPost200ResponseDTO::class))]),
            ApiResponse(responseCode = "400", description = "Bad request", content = [Content(schema = Schema(implementation = ApiExecPost400ResponseDTO::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/api/exec"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun apiExecPost(@Parameter(description = "", required = true) @Valid @RequestBody apiExecPostRequestDTO: ApiExecPostRequestDTO): ResponseEntity<ApiExecPost200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default",],
        summary = "Submit source code",
        operationId = "apiSubmitPost",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "Submission successful", content = [Content(schema = Schema(implementation = ApiSubmitPost200ResponseDTO::class))]),
            ApiResponse(responseCode = "400", description = "Bad request", content = [Content(schema = Schema(implementation = ApiSubmitPost400ResponseDTO::class))]),
            ApiResponse(responseCode = "403", description = "Submission rejected", content = [Content(schema = Schema(implementation = ApiSubmitPost403ResponseDTO::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/api/submit"],
            produces = ["application/json"],
            consumes = ["multipart/form-data"]
    )
    fun apiSubmitPost(@Parameter(description = "Source code file") @Valid @RequestPart("src", required = false) src: org.springframework.core.io.Resource?): ResponseEntity<ApiSubmitPost200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
